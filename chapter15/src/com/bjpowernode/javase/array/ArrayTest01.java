package com.bjpowernode.javase.array;
/*
        1,java中的数值是一种引用数据类型，父类是Object
        2.数值实际上是一个容器，可以同时容纳多个元素。（数组是一个数据的集合）
            字面意思：一组数据
        3.数组当中可以存储基本数据类型的数据，也能存储”引用数据类型“的数据
        4.数组因为是引用类型，所以数组对象是堆内存当中的。（数组是存储再堆当中的）
        5.数组当中如果存储的是”java对象“的话，实际上存储的是对象的”引用“（内存地址）
        6.数组一旦创建，再java中规定长度不可变
        7.数组的分类：一维数组、二维数组、三维数组、多维数组...通常只用一二维
        8.所有数组对象都要lenght属性，用来获取元素的个数
        9.java在的数组要求元素类型统一
        10.数组在内存方面的存储，元素存储的内存地址也是连续的，都是有规则挨着排序的
        11.所以数组都是拿“第一个方框的内存地址”作为整个数组对象的内存地址
        12.数组中每一个元素都是有下标的，下标从0开始。最后一个元素的下标是:length -1
            下标非常重要，因为对数组中的元素进行“存取”的时候，都需要下标进行
        13.数组这种数据结构的优点和缺点是什么？
            优点：查询、检索某个下标上的元素时效率极高。可以说是查询效率最高的数据结构
                为什么？
                    第一：每一个元素的内存地址在空间存储上是连续的
                    第二：每一个元素类型相同，所以占用空间大小一样
                    第三：知道第一个元素的内存地址，知道每一个元素占用空间的大小。又知道下标。所以通过一个数学表达式就可以计算出某个下标元素的内存地址。直接通过内存地址定位
            缺点：
                    第一：由于为了保证数组中每个元素的内存地址连续，所以在数组上随机删除或者增加元素的时候，效率较低，因为随机删元素会涉及到后面元素向前或向后移的情况
                    第二：数组不能存储大数据量，为什么？
                        因为很难在内存空间中找到一块大的连续的内存空间

                      注意：对于数组中最后一个元素的增删没有效率影响

          14.怎么定义一个一维数组

                语法格式：

                        int[] array1;
                        object[] array2;

            15.怎么初始化一个一维数组？
                包括两种方式：静态初始化一维数组，动态初始化一维数组
                静态格式：
                    int[] array = {100,2100,23,49};
                 动态格式：
                    int[] array =new int{5};    //初始化五个长度的一维数组
                                                //int每个元素默认值是0，String数组为null

 */
public class ArrayTest01 {

    public static void main(String[] args) {

        //声明一个int类的数组，使用静态初始化的方式
        int[] a = {1,100,10,20,55,689};
        System.out.println("数组中元素的个数"+a.length);

        System.out.println("第一个元素"+ a[0]);
        System.out.println("最后一个元素"+ a[a.length-1]);

        a[0] = 111;//修改第一个数组元素
        System.out.println("第一个元素"+ a[0]);

        for(int i=0;i< a.length;i++){
            System.out.println(a[i]);//遍历所以元素
        }
        //下标越界，会产生空指针异常
    }

}
